/*
 * libmaple linker script for "JTAG" builds.
 *
 * A "JTAG" build puts .text (and .rodata) in Flash, and
 * .data/.bss/heap (of course) in SRAM, but links starting at the
 * Flash and SRAM starting addresses (0x08000000 and 0x20000000
 * respectively). This will wipe out a Maple bootloader if there's one
 * on the board, so only use this if you know what you're doing.
 *
 * Of course, a "JTAG" build is perfectly usable for upload over SWD,
 * the system memory bootloader, etc. The name is just a historical
 * artifact.
 */

/*
 * This pulls in the appropriate MEMORY declaration from the right
 * subdirectory of stm32/mem/ (the environment must call ld with the
 * right include directory flags to make this happen). Boards can also
 * use this file to use any of libmaple's memory-related hooks (like
 * where the heap should live).
 */
MEMORY
{ 
  ram (rwx) :       ORIGIN = 0x20000008, LENGTH = @LN_MCU_RAM_SIZE@K-8
  bootloader (rx):  ORIGIN = 0x00000000, LENGTH = @LN_BOOTLOADER_SIZE@K
  rom (rx)  :       ORIGIN = 0x00000000+@LN_BOOTLOADER_SIZE@K, LENGTH = @LN_MCU_FLASH_SIZE@K-@LN_MCU_EEPROM_SIZE@K-@LN_BOOTLOADER_SIZE@K
  e2prom (rx)  :    ORIGIN = 0x00000000+@LN_MCU_FLASH_SIZE@K-@LN_MCU_EEPROM_SIZE@K, LENGTH = @LN_MCU_EEPROM_SIZE@K
}
/**
    we allocate 4 kB at the end for the eeprom
*/
PROVIDE(eeprom_size = LENGTH(e2prom));
PROVIDE(eeprom_begin = ORIGIN(e2prom));
/*
 * Linker script for libmaple.
 *
 * Original author "lanchon" from ST forums, with modifications by LeafLabs.
 */
/* Provide memory region aliases for common.inc */
REGION_ALIAS("REGION_TEXT", rom);
REGION_ALIAS("REGION_DATA", ram);
REGION_ALIAS("REGION_BSS", ram);
REGION_ALIAS("REGION_RODATA", rom);
REGION_ALIAS("REGION_EEPROM", e2prom);


/*
 * Configure other libraries we want in the link.
 *
 * libgcc, libc, and libm are common across supported toolchains.
 * However, some toolchains require additional archives which aren't
 * present everywhere (e.g. ARM's gcc-arm-embedded releases).
 *
 * To hack around this, we let the build system specify additional
 * archives by putting the right extra_libs.inc (in a directory under
 * toolchains/) in our search path.
 */
GROUP(libc.a libm.a)
/* GROUP(libnosys.a) */

/*
 * These force the linker to search for vector table symbols.
 *
 * These symbols vary by STM32 family (and also within families).
 * It's up to the build system to configure the link's search path
 * properly for the target MCU.
 */
/*INCLUDE vector_symbols.inc*/

/* STM32 vector table. */

/* C runtime initialization function. */
EXTERN(start_c)

/* main entry point */
EXTERN(main)

/* Initial stack pointer value. */
/* Reset vector and chip reset entry point */
EXTERN(__start__)
ENTRY(__start__)
PROVIDE(__exc_reset = __start__);


SECTIONS
{
    .text :
      {
        __text_start__ = .;
        . = ALIGN(4);
        KEEP(*(.init))
        KEEP(*(.vector_table))
        KEEP(*(.isr_code))

        /*
         * Program code and vague linking
         */
        *(.text .text.* .gnu.linkonce.t.*)
        *(*.rodata)
        *(*.rodata.*)

        *(.plt)
        *(.eh_frame_hdr)
        *(.eh_frame)


        . = ALIGN(4);
        __preinit_array_start = .;
        KEEP (*(.preinit_array))
        __preinit_array_end = .;

        . = ALIGN(4);
        __init_array_start = .;
        KEEP (*(SORT(.init_array.*)))
        KEEP (*(.init_array))
        __init_array_end = .;

        . = ALIGN(0x4);
        KEEP (*crtbegin.o(.ctors))
        KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
        KEEP (*(SORT(.ctors.*)))
        KEEP (*crtend.o(.ctors))

        . = ALIGN(4);
        KEEP(*(.fini))

        . = ALIGN(4);
        __fini_array_start = .;
        KEEP (*(.fini_array))
        KEEP (*(SORT(.fini_array.*)))
        __fini_array_end = .;

        KEEP (*crtbegin.o(.dtors))
        KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
        KEEP (*(SORT(.dtors.*)))
        KEEP (*crtend.o(.dtors))
      } > REGION_TEXT
      .rodata_section : 
      {
    	    . = ALIGN(8);
    	    *(.srodata.cst16)
    	    *(.srodata.cst8)
    	    *(.srodata.cst4)
    	    *(.srodata.cst2)
    	    *(.srodata .srodata.*)
          . = ALIGN(4);
      } > REGION_TEXT

      .vma_section : 
      {
         . = ALIGN(4);
    	    _data_lma = .;
      } > rom
     
    /*
     * Ro image to be copied from flash to ram
     */                    
        .data :
          {
            PROVIDE( _data_begin= .); /* mark copy section start in ram */            
    	      PROVIDE( __global_pointer$ = . + 0x800); 
            . = ALIGN(4);
            . += 8; // marker
            
            *(.rdata)
   	        *(.data .data.*)
    	      . = ALIGN(4);
    	      *(.sdata .sdata.*)
            *(.got.plt) *(.got)
            . = ALIGN(4);
            PROVIDE( _data_end= .); /* mark copy section start in ram */
          } > REGION_DATA AT> REGION_RODATA
    	.tbss  :
      {
          . = ALIGN(4);
	        *(.tbss*)
      } > REGION_DATA
/*
    .eeprom eeprom_begin :
      {
        . = ALIGN(4); 
      } > REGION_EEPROM
      */

    /*
     * .bss
     */

      .bss (NOLOAD) :
      {
          . = ALIGN(4);
          _bss_begin = .;
	        *(.sbss*)
          *(.bss .bss.* )
          *(COMMON)
      } > REGION_BSS
      .bss2 (NOLOAD) : 
      {
          *(.initial_heap)
          . = ALIGN (4);
          _bss_end = .;
          . = ALIGN (4);
	        _sp = .; 
      } > REGION_BSS

    /*
     * Debugging sections
     */
    .stab             0 (NOLOAD) : { *(.stab) }
    .symtab           0 : { *(.symtab) }
    .stabstr          0 (NOLOAD) : { *(.stabstr) }
    .strtab           0 : { *(.strtab) }
    .shstrtab         0 : { *(.shstrtab) }
    /* DWARF debug sections.
     * Symbols in the DWARF debugging sections are relative to the beginning
     * of the section so we begin them at 0.  */
    /* DWARF 1 */
    .debug          0 (NOLOAD) : { *(.debug) }
    .line           0 (NOLOAD) : { *(.line) }
    /* GNU DWARF 1 extensions */
    .debug_srcinfo  0 (NOLOAD) : { *(.debug_srcinfo) }
    .debug_sfnames  0 (NOLOAD) : { *(.debug_sfnames) }
    /* DWARF 1.1 and DWARF 2 */
    .debug_aranges  0 : { *(.debug_aranges) }
    .debug_pubnames 0 : { *(.debug_pubnames) }
    /* DWARF 2 */
    .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
    .debug_abbrev   0 : { *(.debug_abbrev) }
    .debug_line     0 : { *(.debug_line) }
    .debug_frame    0 : { *(.debug_frame) }
    .debug_str      0 : { *(.debug_str) }
    .debug_loc      0 : { *(.debug_loc) }
    .debug_macinfo  0 (NOLOAD) : { *(.debug_macinfo) }
    /* SGI/MIPS DWARF 2 extensions */
    .debug_weaknames 0 (NOLOAD) : { *(.debug_weaknames) }
    .debug_funcnames 0 (NOLOAD) : { *(.debug_funcnames) }
    .debug_typenames 0 (NOLOAD) : { *(.debug_typenames) }
    .debug_varnames  0 (NOLOAD) : { *(.debug_varnames) }
}

